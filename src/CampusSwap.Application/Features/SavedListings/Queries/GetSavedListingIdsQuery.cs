using CampusSwap.Application.Common.Interfaces;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace CampusSwap.Application.Features.SavedListings.Queries;

public class GetSavedListingIdsQuery : IRequest<List<Guid>>
{
    public string UserId { get; set; } = string.Empty;
}

public class GetSavedListingIdsQueryHandler : IRequestHandler<GetSavedListingIdsQuery, List<Guid>>
{
    private readonly IApplicationDbContext _context;

    public GetSavedListingIdsQueryHandler(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<List<Guid>> Handle(GetSavedListingIdsQuery request, CancellationToken cancellationToken)
    {
        try
        {
            Console.WriteLine($"[GetSavedListingIdsQuery] –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId}");

            // –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UserId –∑—ñ string —É Guid
            if (!Guid.TryParse(request.UserId, out var userGuid))
            {
                Console.WriteLine($"[GetSavedListingIdsQuery] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {request.UserId}");
                throw new ArgumentException($"Invalid user ID format: {request.UserId}");
            }

            Console.WriteLine($"[GetSavedListingIdsQuery] üîç –ü–æ—à—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è UserID (Guid): {userGuid}");

            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î –≤–∑–∞–≥–∞–ª—ñ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ SavedListings
            var totalSavedListings = await _context.SavedListings.CountAsync(cancellationToken);
            Console.WriteLine($"[GetSavedListingIdsQuery] üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É SavedListings: {totalSavedListings}");

            if (totalSavedListings > 0)
            {
                // –í–∏–≤–µ–¥–µ–º–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                var sampleRecords = await _context.SavedListings
                    .Take(3)
                    .Select(sl => new { sl.UserId, sl.ListingId, sl.SavedAt })
                    .ToListAsync(cancellationToken);

                Console.WriteLine($"[GetSavedListingIdsQuery] üîç –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ:");
                foreach (var record in sampleRecords)
                {
                    Console.WriteLine($"[GetSavedListingIdsQuery]   UserId: {record.UserId}, ListingId: {record.ListingId}, SavedAt: {record.SavedAt}");
                }
            }

            // –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Guid –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            var savedListingIds = await _context.SavedListings
                .Where(sl => sl.UserId == userGuid)
                .Select(sl => sl.ListingId)
                .ToListAsync(cancellationToken);

            Console.WriteLine($"[GetSavedListingIdsQuery] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {savedListingIds.Count} ID –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userGuid}");

            if (savedListingIds.Count > 0)
            {
                Console.WriteLine($"[GetSavedListingIdsQuery] üìã ID –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å: {string.Join(", ", savedListingIds)}");
            }

            return savedListingIds;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GetSavedListingIdsQuery] ‚ùå –ü–æ–º–∏–ª–∫–∞: {ex.Message}");
            Console.WriteLine($"[GetSavedListingIdsQuery] ‚ùå StackTrace: {ex.StackTrace}");
            throw;
        }
    }
}
