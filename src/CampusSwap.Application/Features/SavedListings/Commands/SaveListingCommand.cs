using CampusSwap.Application.Common.Interfaces;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace CampusSwap.Application.Features.SavedListings.Commands;

public class SaveListingCommand : IRequest
{
    public string UserId { get; set; } = string.Empty;
    public string ListingId { get; set; } = string.Empty;
}

public class SaveListingCommandHandler : IRequestHandler<SaveListingCommand>
{
    private readonly IApplicationDbContext _context;

    public SaveListingCommandHandler(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task Handle(SaveListingCommand request, CancellationToken cancellationToken)
    {
        Console.WriteLine($"[SaveListingCommand] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId}");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
        if (!Guid.TryParse(request.UserId, out var userGuid))
        {
            Console.WriteLine($"[SaveListingCommand] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {request.UserId}");
            throw new ArgumentException($"Invalid user ID format: {request.UserId}");
        }

        if (!Guid.TryParse(request.ListingId, out var listingGuid))
        {
            Console.WriteLine($"[SaveListingCommand] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {request.ListingId}");
            throw new ArgumentException($"Invalid listing ID format: {request.ListingId}");
        }

        var existing = await _context.SavedListings
            .FirstOrDefaultAsync(sl => sl.UserId == userGuid &&
                                     sl.ListingId == listingGuid,
                                cancellationToken);

        if (existing != null)
        {
            Console.WriteLine($"[SaveListingCommand] ‚ö†Ô∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
            return; // –í–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
        }


        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        var listing = await _context.Listings
            .FirstOrDefaultAsync(l => l.Id == listingGuid, cancellationToken);

        if (listing == null)
        {
            Console.WriteLine($"[SaveListingCommand] ‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            throw new KeyNotFoundException($"Listing with ID {request.ListingId} not found.");
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        var savedListing = new CampusSwap.Domain.Entities.SavedListing
        {
            Id = Guid.NewGuid(),
            UserId = userGuid,
            ListingId = listingGuid,
            SavedAt = DateTime.UtcNow
        };

        Console.WriteLine($"[SaveListingCommand] üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...");
        _context.SavedListings.Add(savedListing);

        Console.WriteLine($"[SaveListingCommand] üíæ –í–∏–∫–ª–∏–∫ SaveChangesAsync...");
        var savedCount = await _context.SaveChangesAsync(cancellationToken);
        Console.WriteLine($"[SaveListingCommand] üìä SaveChangesAsync –ø–æ–≤–µ—Ä–Ω—É–≤: {savedCount} –∑–∞–ø–∏—Å—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");

        Console.WriteLine($"[SaveListingCommand] ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
    }
}
