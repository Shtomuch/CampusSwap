using CampusSwap.Application.Common.Interfaces;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace CampusSwap.Application.Features.SavedListings.Commands;

public class RemoveSavedListingCommand : IRequest<bool>
{
    public Guid ListingId { get; set; }
    public string UserId { get; set; } = string.Empty;
}

public class RemoveSavedListingCommandHandler : IRequestHandler<RemoveSavedListingCommand, bool>
{
    private readonly IApplicationDbContext _context;

    public RemoveSavedListingCommandHandler(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<bool> Handle(RemoveSavedListingCommand request, CancellationToken cancellationToken)
    {
        try
        {
            Console.WriteLine($"[RemoveSavedListingCommand] –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {request.ListingId} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId}");

            // –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UserId –∑—ñ string —É Guid
            if (!Guid.TryParse(request.UserId, out var userGuid))
            {
                Console.WriteLine($"[RemoveSavedListingCommand] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {request.UserId}");
                throw new ArgumentException($"Invalid user ID format: {request.UserId}");
            }

            Console.WriteLine($"[RemoveSavedListingCommand] üîç –ü–æ—à—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –¥–ª—è UserID (Guid): {userGuid}");

            var savedListing = await _context.SavedListings
                .FirstOrDefaultAsync(sl => sl.ListingId == request.ListingId && sl.UserId == userGuid, cancellationToken);

            if (savedListing == null)
            {
                Console.WriteLine($"[RemoveSavedListingCommand] ‚ö†Ô∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userGuid}");
                return false;
            }

            Console.WriteLine($"[RemoveSavedListingCommand] üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
            _context.SavedListings.Remove(savedListing);
            var deletedCount = await _context.SaveChangesAsync(cancellationToken);
            Console.WriteLine($"[RemoveSavedListingCommand] üìä SaveChangesAsync –ø–æ–≤–µ—Ä–Ω—É–≤: {deletedCount} –∑–∞–ø–∏—Å—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ");

            Console.WriteLine($"[RemoveSavedListingCommand] ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userGuid}");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[RemoveSavedListingCommand] ‚ùå –ü–æ–º–∏–ª–∫–∞: {ex.Message}");
            Console.WriteLine($"[RemoveSavedListingCommand] ‚ùå StackTrace: {ex.StackTrace}");
            throw;
        }
    }
}