using CampusSwap.Application.Common.Interfaces;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace CampusSwap.Application.Features.Users.Commands;

public class UpdateUserProfileCommand : IRequest
{
    public string UserId { get; set; } = string.Empty;
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string PhoneNumber { get; set; } = string.Empty;
}

public class UpdateUserProfileCommandHandler : IRequestHandler<UpdateUserProfileCommand>
{
    private readonly IApplicationDbContext _context;

    public UpdateUserProfileCommandHandler(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task Handle(UpdateUserProfileCommand request, CancellationToken cancellationToken)
    {
        Console.WriteLine($"[UpdateUserProfileCommand] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId}");
        Console.WriteLine($"[UpdateUserProfileCommand] –î–∞–Ω—ñ: FirstName={request.FirstName}, LastName={request.LastName}, PhoneNumber={request.PhoneNumber}");

        try
        {
            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.Id == Guid.Parse(request.UserId), cancellationToken);

            if (user == null)
            {
                Console.WriteLine($"[UpdateUserProfileCommand] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {request.UserId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
                throw new KeyNotFoundException($"User with ID {request.UserId} not found.");
            }

            Console.WriteLine($"[UpdateUserProfileCommand] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {user.Email}");

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user.FirstName = request.FirstName;
            user.LastName = request.LastName;
            user.PhoneNumber = request.PhoneNumber;
            user.UpdatedAt = DateTime.UtcNow;

            Console.WriteLine($"[UpdateUserProfileCommand] üìù –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ...");

            await _context.SaveChangesAsync(cancellationToken);

            Console.WriteLine($"[UpdateUserProfileCommand] ‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
            Console.WriteLine($"[UpdateUserProfileCommand] üìù –ù–æ–≤—ñ –¥–∞–Ω—ñ: {user.FullName}, Phone: {user.PhoneNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[UpdateUserProfileCommand] ‚ùå –ü–æ–º–∏–ª–∫–∞: {ex.Message}");
            Console.WriteLine($"[UpdateUserProfileCommand] ‚ùå Stack trace: {ex.StackTrace}");
            throw;
        }
    }
}
