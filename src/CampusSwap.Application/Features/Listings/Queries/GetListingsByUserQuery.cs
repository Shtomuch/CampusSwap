using CampusSwap.Application.Common.Interfaces;
using CampusSwap.Application.Features.Listings.Queries;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace CampusSwap.Application.Features.Listings.Queries;

public class GetListingsByUserQuery : IRequest<List<ListingDto>>
{
    public string UserId { get; set; } = string.Empty;
}

public class GetListingsByUserQueryHandler : IRequestHandler<GetListingsByUserQuery, List<ListingDto>>
{
    private readonly IApplicationDbContext _context;

    public GetListingsByUserQueryHandler(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<List<ListingDto>> Handle(GetListingsByUserQuery request, CancellationToken cancellationToken)
    {
        Console.WriteLine($"[GetListingsByUserQuery] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {request.UserId}");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç–∏ UserId —è–∫ Guid
        if (!Guid.TryParse(request.UserId, out var userId))
        {
            Console.WriteLine($"[GetListingsByUserQuery] ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç UserId: {request.UserId}");
            return new List<ListingDto>();
        }

        Console.WriteLine($"[GetListingsByUserQuery] üîç –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {userId}");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        var user = await _context.Users
            .FirstOrDefaultAsync(u => u.Id == userId, cancellationToken);
        
        if (user == null)
        {
            Console.WriteLine($"[GetListingsByUserQuery] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {request.UserId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            return new List<ListingDto>();
        }
        
        Console.WriteLine($"[GetListingsByUserQuery] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–æ: {user.Email}");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –±–∞–∑—ñ
        var allListings = await _context.Listings
            .Include(l => l.Images)
            .Include(l => l.User)
            .AsNoTracking()
            .ToListAsync(cancellationToken);
        
        Console.WriteLine($"[GetListingsByUserQuery] üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ –±–∞–∑—ñ: {allListings.Count}");
        
        if (allListings.Any())
        {
            Console.WriteLine($"[GetListingsByUserQuery] üîç –ü—Ä–∏–∫–ª–∞–¥–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ –±–∞–∑—ñ:");
            foreach (var listing in allListings.Take(3))
            {
                Console.WriteLine($"[GetListingsByUserQuery]   ID: {listing.Id}, UserId: {listing.UserId}, Title: {listing.Title}, IsDeleted: {listing.IsDeleted}, Price: {listing.Price.Amount} {listing.Price.Currency}");
            }
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ToString().ToUpper() –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö Guid –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
        var listings = await _context.Listings
            .Where(l => l.UserId.ToString().ToUpper() == request.UserId.ToUpper() && !l.IsDeleted)
            .Include(l => l.Images)
            .Include(l => l.User)
            .AsNoTracking()
            .OrderByDescending(l => l.CreatedAt)
            .ToListAsync(cancellationToken);

        Console.WriteLine($"[GetListingsByUserQuery] üîç –ó–Ω–∞–π–¥–µ–Ω–æ {listings.Count} –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId}");

        var result = listings.Select(l => new ListingDto
        {
            Id = l.Id,
            Title = l.Title,
            Description = l.Description,
            Price = l.Price.Amount,
            Currency = l.Price.Currency,
            Category = l.Category,
            Status = l.Status,
            Condition = l.Condition,
            ISBN = l.ISBN,
            CourseCode = l.CourseCode,
            Location = l.Location,
            IsNegotiable = l.IsNegotiable,
            ViewsCount = l.ViewsCount,
            UserId = l.UserId,
            SellerName = l.User?.FullName ?? "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü—å",
            CreatedAt = l.CreatedAt,
            UpdatedAt = l.UpdatedAt,
            ImageUrls = l.Images?.Where(img => !img.IsDeleted).Select(img => img.ImageUrl).ToList() ?? new List<string>()
        }).ToList();

        Console.WriteLine($"[GetListingsByUserQuery] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {result.Count} –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        return result;
    }
}

