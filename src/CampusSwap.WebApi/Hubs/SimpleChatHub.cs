using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR;
using System.Security.Claims;

namespace CampusSwap.WebApi.Hubs;

[Authorize]
public class SimpleChatHub : Hub
{
    private static readonly Dictionary<string, string> _userConnections = new();

    public override async Task OnConnectedAsync()
    {
        var userId = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId))
        {
            _userConnections[userId] = Context.ConnectionId;
            Console.WriteLine($"[SimpleChatHub] ‚úÖ User {userId} connected with connection {Context.ConnectionId}");
        }
        
        await base.OnConnectedAsync();
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        var userId = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId) && _userConnections.ContainsKey(userId))
        {
            _userConnections.Remove(userId);
            Console.WriteLine($"[SimpleChatHub] ‚úÖ User {userId} disconnected");
        }
        
        await base.OnDisconnectedAsync(exception);
    }

    public async Task SendMessage(string recipientId, string message)
    {
        Console.WriteLine($"[SimpleChatHub.SendMessage] ‚≠ê METHOD CALLED!");
        Console.WriteLine($"[SimpleChatHub.SendMessage] RecipientId: {recipientId}");
        Console.WriteLine($"[SimpleChatHub.SendMessage] Message: {message}");

        try
        {
            var senderId = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"[SimpleChatHub.SendMessage] SenderId: {senderId}");

            if (string.IsNullOrEmpty(senderId))
            {
                Console.WriteLine($"[SimpleChatHub.SendMessage] ‚ùå User not authenticated");
                await Clients.Caller.SendAsync("Error", "User not authenticated");
                return;
            }

            if (string.IsNullOrEmpty(message) || string.IsNullOrEmpty(recipientId))
            {
                Console.WriteLine($"[SimpleChatHub.SendMessage] ‚ùå Invalid parameters");
                await Clients.Caller.SendAsync("Error", "Invalid parameters");
                return;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            var messageObj = new
            {
                Id = Guid.NewGuid().ToString(),
                SenderId = senderId,
                ReceiverId = recipientId,
                Content = message,
                SentAt = DateTime.UtcNow,
                SenderName = "User " + senderId.Substring(0, 8)
            };

            Console.WriteLine($"[SimpleChatHub.SendMessage] ‚úÖ Message created: {messageObj.Id}");

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—É
            await Clients.Caller.SendAsync("MessageSent", messageObj);
            Console.WriteLine($"[SimpleChatHub.SendMessage] ‚úÖ Confirmation sent to sender");

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—É, —è–∫—â–æ –≤—ñ–Ω –æ–Ω–ª–∞–π–Ω
            if (_userConnections.ContainsKey(recipientId))
            {
                Console.WriteLine($"[SimpleChatHub.SendMessage] ‚úÖ Recipient {recipientId} is online, sending message");
                await Clients.Client(_userConnections[recipientId]).SendAsync("ReceiveMessage", messageObj);
                Console.WriteLine($"[SimpleChatHub.SendMessage] ‚úÖ Message sent to recipient");
            }
            else
            {
                Console.WriteLine($"[SimpleChatHub.SendMessage] ‚ö†Ô∏è Recipient {recipientId} is not online");
            }
            
            Console.WriteLine($"[SimpleChatHub.SendMessage] üéâ SendMessage completed successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SimpleChatHub.SendMessage] üí• ERROR: {ex.Message}");
            Console.WriteLine($"[SimpleChatHub.SendMessage] üí• Stack: {ex.StackTrace}");
            await Clients.Caller.SendAsync("Error", $"Error: {ex.Message}");
            throw; // Re-throw to let SignalR handle it properly
        }
    }

    public async Task GetConversations()
    {
        Console.WriteLine($"[SimpleChatHub.GetConversations] ‚≠ê METHOD CALLED!");
        
        try
        {
            var userId = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"[SimpleChatHub.GetConversations] UserId: {userId}");

            if (string.IsNullOrEmpty(userId))
            {
                await Clients.Caller.SendAsync("Error", "User not authenticated");
                return;
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —Ä–æ–∑–º–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
            var conversations = new List<object>();
            
            await Clients.Caller.SendAsync("ConversationsLoaded", conversations);
            Console.WriteLine($"[SimpleChatHub.GetConversations] ‚úÖ Conversations sent");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SimpleChatHub.GetConversations] üí• ERROR: {ex.Message}");
            await Clients.Caller.SendAsync("Error", $"Error: {ex.Message}");
        }
    }
}
