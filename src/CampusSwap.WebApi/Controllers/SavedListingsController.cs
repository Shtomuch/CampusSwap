using CampusSwap.Application.Features.Listings.Queries;
using CampusSwap.Application.Features.SavedListings.Commands;
using CampusSwap.Application.Features.SavedListings.Queries;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace CampusSwap.WebApi.Controllers;

[ApiController]
[Route("api/saved-listings")]
[Authorize]
public class SavedListingsController : ControllerBase
{
    private readonly IMediator _mediator;

    public SavedListingsController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpGet]
    public async Task<IActionResult> GetSavedListings()
    {
        try
        {
            Console.WriteLine("[SavedListingsController] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("[SavedListingsController] ‚ùå User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ");
                return Unauthorized("User ID not found in token.");
            }

            Console.WriteLine($"[SavedListingsController] üîç –ó–∞–ø–∏—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {userId}");
            
            var query = new GetSavedListingIdsQuery { UserId = userId };
            var savedListingIds = await _mediator.Send(query);
            
            Console.WriteLine($"[SavedListingsController] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {savedListingIds.Count} –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å");
            return Ok(savedListingIds);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavedListingsController] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å: {ex.Message}");
            return StatusCode(500, "Internal server error");
        }
    }

    [HttpPost]
    public async Task<IActionResult> SaveListing([FromBody] SaveListingRequest request)
    {
        try
        {
            Console.WriteLine($"[SavedListingsController] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {request.ListingId}");
            
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("[SavedListingsController] ‚ùå User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ");
                return Unauthorized("User ID not found in token.");
            }

            var command = new SaveListingCommand
            {
                UserId = userId,
                ListingId = request.ListingId
            };

            await _mediator.Send(command);
            
            Console.WriteLine($"[SavedListingsController] ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {request.ListingId} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId}");
            return Ok(new { message = "Listing saved successfully" });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavedListingsController] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {ex.Message}");
            return StatusCode(500, "Internal server error");
        }
    }

    [HttpDelete("{listingId}")]
    public async Task<IActionResult> RemoveSavedListing(string listingId)
    {
        try
        {
            Console.WriteLine($"[SavedListingsController] –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {listingId}");
            
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("[SavedListingsController] ‚ùå User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ");
                return Unauthorized("User ID not found in token.");
            }

            var command = new RemoveSavedListingCommand
            {
                UserId = userId,
                ListingId = Guid.Parse(listingId)
            };

            await _mediator.Send(command);
            
            Console.WriteLine($"[SavedListingsController] ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è {listingId} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId}");
            return Ok(new { message = "Listing removed from saved successfully" });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavedListingsController] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {ex.Message}");
            return StatusCode(500, "Internal server error");
        }
    }
}

public class SaveListingRequest
{
    public string ListingId { get; set; } = string.Empty;
}
