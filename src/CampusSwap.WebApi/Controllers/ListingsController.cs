using CampusSwap.Application.Features.Listings.Commands;
using CampusSwap.Application.Features.Listings.Queries;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace CampusSwap.WebApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ListingsController : ControllerBase
{
    private readonly IMediator _mediator;

    public ListingsController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpGet]
    public async Task<IActionResult> GetListings([FromQuery] GetListingsQuery query)
    {
        var result = await _mediator.Send(query);
        return Ok(result);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetListing(Guid id)
    {
        var result = await _mediator.Send(new GetListingByIdQuery { Id = id });
        return Ok(result);
    }

    [HttpGet("my")]
    [Authorize]
    public async Task<IActionResult> GetMyListings()
    {
        try
        {
            Console.WriteLine("[ListingsController] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("[ListingsController] ‚ùå User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ");
                return Unauthorized("User ID not found in token.");
            }

            Console.WriteLine($"[ListingsController] üîç –ó–∞–ø–∏—Ç –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {userId}");
            
            var query = new GetListingsByUserQuery { UserId = userId };
            var result = await _mediator.Send(query);
            
            Console.WriteLine($"[ListingsController] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {result.Count} –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            return Ok(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ListingsController] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {ex.Message}");
            return StatusCode(500, "Internal server error");
        }
    }

    [HttpPost]
    [Authorize]
    public async Task<IActionResult> CreateListing([FromBody] CreateListingCommand command)
    {
        try
        {
            Console.WriteLine($"[ListingsController] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: Title='{command.Title}', Category={command.Category}, Price={command.Price}");
            Console.WriteLine($"[ListingsController] –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {command.ImageUrls?.Count ?? 0} —Ñ–∞–π–ª—ñ–≤");
            
            var id = await _mediator.Send(command);
            Console.WriteLine($"[ListingsController] –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {id}");
            
            return CreatedAtAction(nameof(GetListing), new { id }, new { id });
        }
        catch (FluentValidation.ValidationException ex)
        {
            Console.WriteLine($"[ListingsController] –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ex.Message}");
            
            var errors = ex.Errors.GroupBy(e => e.PropertyName)
                .ToDictionary(g => g.Key, g => g.Select(e => e.ErrorMessage).ToArray());
            
            return BadRequest(new { 
                message = "One or more validation errors occurred.",
                errors = errors
            });
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"[ListingsController] –ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {ex.Message}");
            return BadRequest(new { message = ex.Message });
        }
        catch (UnauthorizedAccessException ex)
        {
            Console.WriteLine($"[ListingsController] –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {ex.Message}");
            return Unauthorized(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ListingsController] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
            Console.WriteLine($"[ListingsController] Stack trace: {ex.StackTrace}");
            return StatusCode(500, new { message = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." });
        }
    }

    [HttpPut("{id}")]
    [Authorize]
    public async Task<IActionResult> UpdateListing(Guid id, [FromBody] UpdateListingCommand command)
    {
        command.Id = id;
        await _mediator.Send(command);
        return NoContent();
    }

    [HttpDelete("{id}")]
    [Authorize]
    public async Task<IActionResult> DeleteListing(Guid id)
    {
        await _mediator.Send(new DeleteListingCommand { Id = id });
        return NoContent();
    }

    [HttpPost("{id}/save")]
    [Authorize]
    public async Task<IActionResult> SaveListing(Guid id)
    {
        await _mediator.Send(new SaveListingCommand { ListingId = id });
        return Ok(new { message = "Listing saved" });
    }

    [HttpDelete("{id}/save")]
    [Authorize]
    public async Task<IActionResult> UnsaveListing(Guid id)
    {
        await _mediator.Send(new UnsaveListingCommand { ListingId = id });
        return Ok(new { message = "Listing unsaved" });
    }


    [HttpGet("saved")]
    [Authorize]
    public async Task<IActionResult> GetSavedListings()
    {
        var result = await _mediator.Send(new GetSavedListingsQuery());
        return Ok(result);
    }
}