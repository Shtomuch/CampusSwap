import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { PhotoIcon, XMarkIcon, ExclamationTriangleIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';
import api from '../services/api';
import { ListingCategory } from '../types';

interface ListingForm {
  title: string;
  description: string;
  price: number;
  category: ListingCategory;
  condition: string;
  isbn?: string;
  courseCode?: string;
  author?: string;
  publicationYear?: number;
  location: string;
  isNegotiable: boolean;
}

interface ValidationError {
  field: string;
  message: string;
}

interface ApiError {
  message: string;
  errors?: Record<string, string[]>;
  statusCode?: number;
}

export default function CreateListingPage() {
  const navigate = useNavigate();
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);
  const [showSuccess, setShowSuccess] = useState(false);
  const [generalError, setGeneralError] = useState<string>('');
  const [uploadProgress, setUploadProgress] = useState<{ current: number; total: number } | null>(null);

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<ListingForm>();

  const category = watch('category');

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
    const validFiles: File[] = [];
    const errors: string[] = [];
    
    files.forEach(file => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
      if (!file.type.startsWith('image/')) {
        errors.push(`–§–∞–π–ª "${file.name}" –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º`);
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (5MB)
      if (file.size > 5 * 1024 * 1024) {
        errors.push(`–§–∞–π–ª "${file.name}" –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–º–∞–∫—Å–∏–º—É–º 5MB)`);
        return;
      }
      
      validFiles.push(file);
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    if (errors.length > 0) {
      setGeneralError(errors.join('; '));
      return;
    }
    
    const newImages = [...images, ...validFiles].slice(0, 10);
    setImages(newImages);

    const previews = newImages.map(file => URL.createObjectURL(file));
    setImagePreviews(previews);
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    setGeneralError('');
  };

  const removeImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index);
    const newPreviews = imagePreviews.filter((_, i) => i !== index);
    setImages(newImages);
    setImagePreviews(newPreviews);
  };

  const onSubmit = async (data: ListingForm) => {
    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    setValidationErrors([]);
    setGeneralError('');
    setShowSuccess(false);

    try {
      console.log('üöÄ [CreateListing] –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è');
      console.log('üìã [CreateListing] –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', data);
      console.log('üñºÔ∏è [CreateListing] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å:', images.length);
      
      setIsSubmitting(true);

      // Upload images first
      const imageUrls: string[] = [];
      if (images.length > 0) {
        console.log('üì§ [CreateListing] –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å...');
        setUploadProgress({ current: 0, total: images.length });
        
        for (let i = 0; i < images.length; i++) {
          const image = images[i];
          console.log(`üì§ [CreateListing] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${i + 1}/${images.length}:`, image.name, `(${Math.round(image.size / 1024)}KB)`);
          
          try {
            const formData = new FormData();
            formData.append('file', image);
            const response = await api.post('/upload', formData, {
              headers: { 'Content-Type': 'multipart/form-data' },
            });
            imageUrls.push(response.data.url);
            console.log(`‚úÖ [CreateListing] –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${i + 1} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, response.data.url);
            
            setUploadProgress({ current: i + 1, total: images.length });
          } catch (uploadError: any) {
            console.error(`‚ùå [CreateListing] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${i + 1}:`, uploadError);
            
            if (uploadError.response?.status === 400) {
              const errorMessage = uploadError.response.data?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è';
              setGeneralError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è "${image.name}": ${errorMessage}`);
            } else {
              setGeneralError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è "${image.name}". –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
            }
            
            setUploadProgress(null);
            setIsSubmitting(false);
            return;
          }
        }
        
        setUploadProgress(null);
      } else {
        console.log('‚ö†Ô∏è [CreateListing] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        setGeneralError('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
        setIsSubmitting(false);
        return;
      }

      // Prepare listing data - –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
      const listingData: any = {
        title: data.title?.trim() || '',
        description: data.description?.trim() || '',
        price: data.price ? Number(data.price) : 0,
        category: data.category ? Number(data.category) : 0,
        condition: data.condition?.trim() || '',
        location: data.location?.trim() || '',
        isNegotiable: Boolean(data.isNegotiable),
        imageUrls,
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
        ...(data.isbn?.trim() && { isbn: data.isbn.trim() }),
        ...(data.author?.trim() && { author: data.author.trim() }),
        ...(data.courseCode?.trim() && { courseCode: data.courseCode.trim() }),
        ...(data.publicationYear && { publicationYear: Number(data.publicationYear) }),
      };

      // –í–∏–¥–∞–ª–∏—Ç–∏ –ø—É—Å—Ç—ñ –ø–æ–ª—è
      Object.keys(listingData).forEach(key => {
        const typedKey = key as keyof typeof listingData;
        if (listingData[typedKey] === '' || listingData[typedKey] === null || listingData[typedKey] === undefined) {
          delete (listingData as any)[key];
        }
      });

      console.log('üìù [CreateListing] –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', listingData);

      // Create listing
      const response = await api.post('/listings', listingData);
      console.log('‚úÖ [CreateListing] –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', response.data);

      setShowSuccess(true);
      setTimeout(() => {
        navigate('/profile');
      }, 2000);

    } catch (error: any) {
      console.error('‚ùå [CreateListing] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', error);
      
      
      if (error.response) {
        console.error('üìä [CreateListing] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
        console.error('üìä [CreateListing] –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
        console.error('üìä [CreateListing] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.headers);
        
        const apiError: ApiError = error.response.data;
        
        if (error.response.status === 400 && apiError.errors) {
          // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
          const errors: ValidationError[] = [];
          
          Object.entries(apiError.errors).forEach(([field, messages]) => {
            messages.forEach(message => {
              errors.push({ field, message });
              console.error(`üîç [CreateListing] –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–ª—è "${field}":`, message);
            });
          });
          
          setValidationErrors(errors);
          console.log('üìã [CreateListing] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
        } else {
          // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
          const errorMessage = apiError.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è';
          setGeneralError(errorMessage);
          console.error('‚ö†Ô∏è [CreateListing] –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', errorMessage);
        }
      } else if (error.request) {
        console.error('üåê [CreateListing] –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ:', error.request);
        setGeneralError('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      } else {
        console.error('‚öôÔ∏è [CreateListing] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
        setGeneralError('–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
    } finally {
      setIsSubmitting(false);
      console.log('üèÅ [CreateListing] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É —Ñ–æ—Ä–º–∏');
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏ –ø–æ–ª—è
  const getFieldDisplayName = (field: string): string => {
    const fieldNames: Record<string, string> = {
      'title': '–ù–∞–∑–≤–∞',
      'description': '–û–ø–∏—Å',
      'price': '–¶—ñ–Ω–∞',
      'category': '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è',
      'condition': '–°—Ç–∞–Ω',
      'location': '–ú—ñ—Å—Ü–µ –∑—É—Å—Ç—Ä—ñ—á—ñ',
      'isbn': 'ISBN',
      'author': '–ê–≤—Ç–æ—Ä',
      'courseCode': '–ö–æ–¥ –∫—É—Ä—Å—É',
      'publicationYear': '–†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è',
      'imageUrls': '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
    };
    return fieldNames[field] || field;
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold text-gray-900 mb-8">–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</h1>

      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö */}
      {showSuccess && (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center">
          <CheckCircleIcon className="h-5 w-5 text-green-400 mr-3" />
          <div>
            <h3 className="text-sm font-medium text-green-800">–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</h3>
            <p className="text-sm text-green-700 mt-1">–í–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é...</p>
          </div>
        </div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å */}
      {uploadProgress && (
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center">
            <div className="flex-1">
              <h3 className="text-sm font-medium text-blue-800">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å</h3>
              <p className="text-sm text-blue-700 mt-1">
                {uploadProgress.current} –∑ {uploadProgress.total} –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
              </p>
              <div className="mt-2 w-full bg-blue-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${(uploadProgress.current / uploadProgress.total) * 100}%` }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ */}
      {generalError && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex">
            <ExclamationTriangleIcon className="h-5 w-5 text-red-400 mr-3 mt-0.5" />
            <div className="flex-1">
              <h3 className="text-sm font-medium text-red-800">–ü–æ–º–∏–ª–∫–∞</h3>
              <p className="text-sm text-red-700 mt-1">{generalError}</p>
            </div>
            <button
              type="button"
              onClick={() => setGeneralError('')}
              className="ml-3 text-red-400 hover:text-red-600"
            >
              <XCircleIcon className="h-5 w-5" />
            </button>
          </div>
        </div>
      )}

      {/* –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó */}
      {validationErrors.length > 0 && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex">
            <ExclamationTriangleIcon className="h-5 w-5 text-red-400 mr-3 mt-0.5" />
            <div className="flex-1">
              <h3 className="text-sm font-medium text-red-800">–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó</h3>
              <p className="text-sm text-red-700 mt-1 mb-3">
                –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–º–∏–ª–∫–∏:
              </p>
              <ul className="space-y-1">
                {validationErrors.map((error, index) => (
                  <li key={index} className="text-sm text-red-700">
                    <span className="font-medium">{getFieldDisplayName(error.field)}:</span> {error.message}
                  </li>
                ))}
              </ul>
            </div>
            <button
              type="button"
              onClick={() => setValidationErrors([])}
              className="ml-3 text-red-400 hover:text-red-600"
            >
              <XCircleIcon className="h-5 w-5" />
            </button>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Images */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –§–æ—Ç–æ (–¥–æ 10 —à—Ç—É–∫)
          </label>
          <div className="grid grid-cols-5 gap-4">
            {imagePreviews.map((preview, index) => (
              <div key={index} className="relative">
                <img src={preview} alt="" className="w-full h-24 object-cover rounded-lg" />
                <button
                  type="button"
                  onClick={() => removeImage(index)}
                  className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full"
                >
                  <XMarkIcon className="h-4 w-4" />
                </button>
              </div>
            ))}
            {images.length < 10 && (
              <label className="flex items-center justify-center w-full h-24 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer hover:bg-gray-50">
                <PhotoIcon className="h-8 w-8 text-gray-400" />
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageChange}
                  className="hidden"
                />
              </label>
            )}
          </div>
        </div>

        {/* Title */}
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">
            –ù–∞–∑–≤–∞ *
          </label>
          <input
            {...register('title', { 
              required: '–ù–∞–∑–≤–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞',
              minLength: { value: 3, message: '–ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤' },
              maxLength: { value: 200, message: '–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤' }
            })}
            id="title"
            type="text"
            maxLength={200}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          />
          {errors.title && (
            <p className="mt-1 text-sm text-red-600">{errors.title.message}</p>
          )}
        </div>

        {/* Category */}
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-gray-700">
            –ö–∞—Ç–µ–≥–æ—Ä—ñ—è *
          </label>
          <select
            {...register('category', { required: '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' })}
            id="category"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          >
            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</option>
            <option value="0">–ü—ñ–¥—Ä—É—á–Ω–∏–∫–∏</option>
            <option value="1">–ù–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏</option>
            <option value="2">–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞</option>
            <option value="3">–ú–µ–±–ª—ñ</option>
            <option value="4">–û–¥—è–≥</option>
            <option value="5">–ê–∫—Å–µ—Å—É–∞—Ä–∏</option>
            <option value="6">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
            <option value="7">–Ü–Ω—à–µ</option>
          </select>
          {errors.category && (
            <p className="mt-1 text-sm text-red-600">{errors.category.message}</p>
          )}
        </div>

        {/* Description */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">
            –û–ø–∏—Å *
          </label>
          <textarea
            {...register('description', { 
              required: '–û–ø–∏—Å –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
              minLength: { value: 10, message: '–û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤' },
              maxLength: { value: 2000, message: '–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 2000 —Å–∏–º–≤–æ–ª—ñ–≤' }
            })}
            id="description"
            rows={4}
            maxLength={2000}
            placeholder="–û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ –≤–∞—à —Ç–æ–≤–∞—Ä..."
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          />
          {errors.description && (
            <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
          )}
        </div>

        {/* Additional fields for textbooks */}
        {Number(category) === ListingCategory.Textbooks && (
          <>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="isbn" className="block text-sm font-medium text-gray-700">
                  ISBN
                </label>
                <input
                  {...register('isbn', {
                    maxLength: { value: 20, message: 'ISBN –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 20 —Å–∏–º–≤–æ–ª—ñ–≤' },
                    pattern: { 
                      value: /^[\d\-X]*$/, 
                      message: 'ISBN –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ X' 
                    }
                  })}
                  id="isbn"
                  type="text"
                  maxLength={20}
                  placeholder="978-0-123456-78-9"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
                {errors.isbn && (
                  <p className="mt-1 text-sm text-red-600">{errors.isbn.message}</p>
                )}
              </div>
              <div>
                <label htmlFor="author" className="block text-sm font-medium text-gray-700">
                  –ê–≤—Ç–æ—Ä
                </label>
                <input
                  {...register('author', {
                    maxLength: { value: 100, message: '–Ü–º\'—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤' }
                  })}
                  id="author"
                  type="text"
                  maxLength={100}
                  placeholder="–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
                {errors.author && (
                  <p className="mt-1 text-sm text-red-600">{errors.author.message}</p>
                )}
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="courseCode" className="block text-sm font-medium text-gray-700">
                  –ö–æ–¥ –∫—É—Ä—Å—É
                </label>
                <input
                  {...register('courseCode', {
                    maxLength: { value: 20, message: '–ö–æ–¥ –∫—É—Ä—Å—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 20 —Å–∏–º–≤–æ–ª—ñ–≤' }
                  })}
                  id="courseCode"
                  type="text"
                  maxLength={20}
                  placeholder="CS101"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
                {errors.courseCode && (
                  <p className="mt-1 text-sm text-red-600">{errors.courseCode.message}</p>
                )}
              </div>
              <div>
                <label htmlFor="publicationYear" className="block text-sm font-medium text-gray-700">
                  –†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è
                </label>
                <input
                  {...register('publicationYear', {
                    min: { value: 1900, message: '–†—ñ–∫ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 1900' },
                    max: { value: new Date().getFullYear(), message: `–†—ñ–∫ –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ ${new Date().getFullYear()}` }
                  })}
                  id="publicationYear"
                  type="number"
                  min="1900"
                  max={new Date().getFullYear()}
                  placeholder="2023"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
                {errors.publicationYear && (
                  <p className="mt-1 text-sm text-red-600">{errors.publicationYear.message}</p>
                )}
              </div>
            </div>
          </>
        )}

        {/* Condition */}
        <div>
          <label htmlFor="condition" className="block text-sm font-medium text-gray-700">
            –°—Ç–∞–Ω *
          </label>
          <select
            {...register('condition', { required: '–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω' })}
            id="condition"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          >
            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω</option>
            <option value="–ù–æ–≤–∏–π">–ù–æ–≤–∏–π</option>
            <option value="–Ø–∫ –Ω–æ–≤–∏–π">–Ø–∫ –Ω–æ–≤–∏–π</option>
            <option value="–î–æ–±—Ä–∏–π">–î–æ–±—Ä–∏–π</option>
            <option value="–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π">–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π</option>
          </select>
          {errors.condition && (
            <p className="mt-1 text-sm text-red-600">{errors.condition.message}</p>
          )}
        </div>

        {/* Price and Location */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="price" className="block text-sm font-medium text-gray-700">
              –¶—ñ–Ω–∞ (‚Ç¥) *
            </label>
            <input
              {...register('price', {
                required: '–¶—ñ–Ω–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞',
                min: { value: 1, message: '–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0' },
                max: { value: 999999, message: '–¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞' }
              })}
              id="price"
              type="number"
              min="1"
              max="999999"
              step="1"
              placeholder="100"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
            {errors.price && (
              <p className="mt-1 text-sm text-red-600">{errors.price.message}</p>
            )}
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700">
              –ú—ñ—Å—Ü–µ –∑—É—Å—Ç—Ä—ñ—á—ñ *
            </label>
            <input
              {...register('location', { 
                required: '–ú—ñ—Å—Ü–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ',
                minLength: { value: 3, message: '–ú—ñ—Å—Ü–µ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤' },
                maxLength: { value: 200, message: '–ú—ñ—Å—Ü–µ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤' }
              })}
              id="location"
              type="text"
              maxLength={200}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–µ—Ç—Ä–æ –ö–ü–Ü"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
            {errors.location && (
              <p className="mt-1 text-sm text-red-600">{errors.location.message}</p>
            )}
          </div>
        </div>

        {/* Negotiable */}
        <div className="flex items-center">
          <input
            {...register('isNegotiable')}
            id="isNegotiable"
            type="checkbox"
            className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label htmlFor="isNegotiable" className="ml-2 block text-sm text-gray-900">
            –¢–æ—Ä–≥ –º–æ–∂–ª–∏–≤–∏–π
          </label>
        </div>

        {/* Submit */}
        <div className="flex gap-4">
          <button
            type="submit"
            disabled={isSubmitting || images.length === 0}
            className="flex-1 py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {uploadProgress ? `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${uploadProgress.current}/${uploadProgress.total}` : '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...'}
              </div>
            ) : (
              '–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'
            )}
          </button>
          <button
            type="button"
            onClick={() => navigate(-1)}
            disabled={isSubmitting}
            className="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </form>
    </div>
  );
}