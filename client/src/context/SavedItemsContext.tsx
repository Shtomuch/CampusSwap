import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import api from '../services/api';
import { useAuth } from './AuthContext';

interface SavedItemsContextType {
  savedItems: string[];
  isSaved: (listingId: string) => boolean;
  toggleSaved: (listingId: string) => Promise<void>;
  isLoading: boolean;
}

const SavedItemsContext = createContext<SavedItemsContextType | undefined>(undefined);

export function SavedItemsProvider({ children }: { children: ReactNode }) {
  const [savedItems, setSavedItems] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { isAuthenticated } = useAuth();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (isAuthenticated) {
      loadSavedItems();
    } else {
      setSavedItems([]);
    }
  }, [isAuthenticated]); // eslint-disable-line react-hooks/exhaustive-deps

  const loadSavedItems = async () => {
    try {
      console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...');
      setIsLoading(true);
      
      const response = await api.get('/saved-listings');
      console.log('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:', response.data);
      
      // API –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ ID, –∞ –Ω–µ –æ–±'—î–∫—Ç—ñ–≤
      const items = Array.isArray(response.data) ? response.data : [];
      setSavedItems(items);
    } catch (error: any) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:', error);
      // –Ø–∫—â–æ endpoint –Ω–µ —ñ—Å–Ω—É—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ localStorage —è–∫ fallback
      const localSaved = localStorage.getItem('savedItems');
      if (localSaved) {
        try {
          const parsed = JSON.parse(localSaved);
          setSavedItems(parsed);
          console.log('üì± –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', parsed);
        } catch (e) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', e);
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  const isSaved = (listingId: string): boolean => {
    return savedItems.includes(listingId);
  };

  const toggleSaved = async (listingId: string): Promise<void> => {
    if (!isAuthenticated) {
      console.log('üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –Ω–µ –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏');
      return;
    }

    try {
      console.log('üíñ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É:', listingId);
      const isCurrentlySaved = isSaved(listingId);

      if (isCurrentlySaved) {
        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö
        await api.delete(`/saved-listings/${listingId}`);
        console.log('üóëÔ∏è –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö');
      } else {
        // –î–æ–¥–∞—î–º–æ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö
        await api.post('/saved-listings', { listingId });
        console.log('‚ûï –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö');
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      setSavedItems(prev => {
        const newItems = isCurrentlySaved 
          ? prev.filter(id => id !== listingId)
          : [...prev, listingId];
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —è–∫ backup
        localStorage.setItem('savedItems', JSON.stringify(newItems));
        console.log('üíæ –û–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', newItems);
        
        return newItems;
      });

    } catch (error: any) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É:', error);
      
      // Fallback –¥–æ localStorage
      const localSaved = JSON.parse(localStorage.getItem('savedItems') || '[]');
      const isCurrentlySaved = localSaved.includes(listingId);
      
      if (isCurrentlySaved) {
        const newItems = localSaved.filter((id: string) => id !== listingId);
        localStorage.setItem('savedItems', JSON.stringify(newItems));
        setSavedItems(newItems);
        console.log('üì± –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ localStorage –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
      } else {
        const newItems = [...localSaved, listingId];
        localStorage.setItem('savedItems', JSON.stringify(newItems));
        setSavedItems(newItems);
        console.log('üì± –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ localStorage –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è');
      }
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const message = isCurrentlySaved 
        ? '–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö (–∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ)'
        : '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö (–∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ)';
      
      // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ toast notification —Ç—É—Ç
      console.log('‚ÑπÔ∏è', message);
    }
  };

  const value: SavedItemsContextType = {
    savedItems,
    isSaved,
    toggleSaved,
    isLoading,
  };

  return (
    <SavedItemsContext.Provider value={value}>
      {children}
    </SavedItemsContext.Provider>
  );
}

export function useSavedItems(): SavedItemsContextType {
  const context = useContext(SavedItemsContext);
  if (context === undefined) {
    throw new Error('useSavedItems must be used within a SavedItemsProvider');
  }
  return context;
}
