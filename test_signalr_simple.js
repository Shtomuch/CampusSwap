// –¢–µ—Å—Ç —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ SignalR —á–∞—Ç—É
const signalR = require('@microsoft/signalr');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const testSignalRSimple = async () => {
  try {
    // –õ–æ–≥—ñ–Ω
    const loginData = {
      email: 'testuser@example.com',
      password: 'Test123!'
    };
    
    const loginResponse = await fetch('http://localhost:5001/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(loginData)
    });
    
    if (!loginResponse.ok) {
      throw new Error('Login failed: ' + loginResponse.status);
    }
    
    const loginResult = await loginResponse.json();
    console.log('‚úÖ Login successful');
    
    const token = loginResult.AccessToken;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ SignalR –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const connection = new signalR.HubConnectionBuilder()
      .withUrl("http://localhost:5001/hubs/chat", {
        accessTokenFactory: () => token
      })
      .build();
    
    connection.onclose((error) => {
      console.log('Connection closed:', error);
    });
    
    // –°–ª—É—Ö–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏
    connection.on("Error", (error) => {
      console.log('‚ùå SignalR Error:', error);
    });
    
    // –°–ª—É—Ö–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    connection.on("MessageSent", (message) => {
      console.log('‚úÖ Message sent confirmation:', message);
    });
    
    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è
    await connection.start();
    console.log('‚úÖ Connected to SignalR hub');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const recipientId = 'b6ce1662-7309-4d30-b1ba-313eb649fa5c';
    const message = 'Test SignalR message at ' + new Date().toLocaleTimeString();
    
    console.log('üì§ Sending message via SignalR...');
    console.log('RecipientId:', recipientId);
    console.log('Message:', message);
    
    await connection.invoke("SendMessage", recipientId, message);
    console.log('‚úÖ SendMessage invoked successfully');
    
    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    await connection.stop();
    console.log('‚úÖ Connection closed');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
};

testSignalRSimple();
